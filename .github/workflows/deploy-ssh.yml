name: deploy-ssh
on:
  push:
    branches: [ "main" ]
  workflow_dispatch: {}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # (선택) 로컬 경로에 파일 있는지 확인용 디버그
      - name: Debug paths
        run: |
          ls -al module/registry/schema-registry/src/main/resources/db/migration || true
          ls -al module/domain/app/src/main/resources/db/migration || true

      # 서버에 대상 디렉토리 미리 생성 (권한 포함)
      - name: Prepare dirs on server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            sudo mkdir -p /opt/data_mesh/registry/db/migration
            sudo mkdir -p /opt/data_mesh/app/db/migration
            sudo chown -R $USER:$USER /opt/data_mesh

      # 1) 레지스트리 마이그 복사 (Postgres)
      - name: Copy registry migrations
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ secrets.SSH_PORT }}
          source: "module/registry/schema-registry/src/main/resources/db/migration/*.sql"
          target: "/opt/data_mesh/registry/db/migration"
          overwrite: true

      # 2) 앱 마이그 복사 (MySQL)
      - name: Copy app migrations
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ secrets.SSH_PORT }}
          source: "module/domain/app/src/main/resources/db/migration/*.sql"
          target: "/opt/data_mesh/app/db/migration"
          overwrite: true

      # 3) 원격에서 Flyway 실행 (Registry → App 순서)
      - name: Flyway migrate on server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            set -euo pipefail

            docker pull flyway/flyway:10.22

            echo "[Registry/Postgres] migrate"
            docker run --rm \
              -v "/opt/data_mesh/registry/db/migration:/flyway/sql:ro" \
              flyway/flyway:10.22 \
              -url="${{ secrets.PG_URL }}" \
              -user="${{ secrets.PG_USER }}" \
              -password="${{ secrets.PG_PASSWORD }}" \
              -baselineOnMigrate=true -outOfOrder=false -connectRetries=30 \
              migrate

            echo "[App/MySQL] migrate"
            docker run --rm \
              -v "/opt/data_mesh/app/db/migration:/flyway/sql:ro" \
              flyway/flyway:10.22 \
              -url="${{ secrets.MYSQL_URL }}" \
              -user="${{ secrets.MYSQL_USER }}" \
              -password="${{ secrets.MYSQL_PASSWORD }}" \
              -baselineOnMigrate=true -outOfOrder=false -connectRetries=30 \
              migrate

      # 4) 서버 내부에서 헬스 체크
      - name: Smoke (health checks on server)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            set -euo pipefail
            curl -sf "${{ secrets.APP_HEALTH }}" | jq -r .status | grep -q UP
            curl -sf "${{ secrets.REG_HEALTH }}" | jq -r .status | grep -q UP
            echo "All health checks passed."
